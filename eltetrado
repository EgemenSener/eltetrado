#! /usr/bin/env python
import argparse
import itertools
import json
import os
import subprocess
import shutil
import sys
import tempfile

__version__ = '0.0.2-dev1'

def classify_onz(nts, tetrad):
    distinct_chain_count = len(set([nts[i]['chain_name'] for i in tetrad]))
    prefixes = ['', 'uni', 'bi', 'tri', 'tetra']
    classification = 'cannot assign ONZ class to {}molecular tetrad'.format(prefixes[distinct_chain_count])
    if distinct_chain_count == 1:
        n1 = nts[tetrad[0]]['index']
        n2 = nts[tetrad[1]]['index']
        n3 = nts[tetrad[2]]['index']
        n4 = nts[tetrad[3]]['index']
        if n2 < n3 and n3 < n4:
            classification = 'O+'
        elif n2 > n3 and n3 > n4:
            classification = 'O+'
        elif n2 < n3 and n2 < n4:
            classification = 'N+'
        elif n2 < n3 and n2 > n4:
            classification = 'N-'
        elif n2 > n3 and n2 > n4:
            classification = 'Z+'
        elif n2 > n3 and n2 < n4:
            classification = 'Z-'
    return classification

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--json', action='store_true', help='parse input file from JSON format')
    parser.add_argument('--stacking-mismatch', help='a perfect tetrad stacking covers 4 nucleotides; this option can be used with value 1 or 2 to allow this number of nucleotides to be non-stacked with otherwise well aligned tetrad [default=2]', default=2)
    parser.add_argument('--relaxed-stem-definition', action='store_true', help='when set, two sequentially close tetrades will be considered a stem regardless of their stacking')
    parser.add_argument('--strict', action='store_true', help='nucleotides in tetrad are found when linked only by cWH pairing')
    parser.add_argument('--version', action='version', version='%(prog)s {}'.format(__version__))
    parser.add_argument('input', help='a JSON file produced by DSSR if "--json" is used, otherwise a PDB or PDBx/MMCIF file to be analyzed first by DSSR')
    args = parser.parse_args()

    stacking_mismatch = int(args.stacking_mismatch)

    if args.json:
        with open(args.input) as jsonfile:
            dssr = jsonfile.read()
    else:
        currdir = os.path.dirname(os.path.realpath(__file__))
        tempdir = tempfile.mkdtemp()
        shutil.copy(os.path.join(currdir, 'x3dna-dssr'), tempdir)
        shutil.copy(args.input, tempdir)
        dssr = subprocess.Popen(['./x3dna-dssr', '-i={}'.format(os.path.basename(args.input)), '--json', '--symmetry'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=tempdir)
        dssr, _ = dssr.communicate()
        shutil.rmtree(tempdir)

    try:
        data = json.loads(dssr)
    except:
        print('Invalid JSON in', args.input, file=sys.stderr)
        exit(1)

    if 'pairs' not in data:
        print('None')
        exit()

    nts = dict()
    for nt in data['nts']:
        nt_id = nt['nt_id']
        if nt_id.find(':') != -1:
            nt['chain_name'] = '{}:{}'.format(nt_id.split(':')[0], nt['chain_name'])
        nts[nt_id] = nt

    stacks = list()
    for stack in data['stacks']:
        stacks.append(stack['nts_long'].split(','))

    cwh = dict()
    for pair in data['pairs']:
        lw = pair['LW']
        nt1 = nts[pair['nt1']]['nt_id']
        nt2 = nts[pair['nt2']]['nt_id']

        if args.strict:
            if lw == 'cWH':
                if nt1 not in cwh:
                    cwh[nt1] = list()
                cwh[nt1].append(nt2)
            elif lw == 'cHW':
                if nt2 not in cwh:
                    cwh[nt2] = list()
                cwh[nt2].append(nt1)
        else:
            if nt1 not in cwh:
                cwh[nt1] = list()
            cwh[nt1].append(nt2)
            if nt2 not in cwh:
                cwh[nt2] = list()
            cwh[nt2].append(nt1)

    # search for a tetrad: i -> j -> k -> l -> i
    used = set()
    tetrads = list()
    for i in cwh:
        if i in used:
            continue
        for j in cwh[i]:
            if j in cwh and j not in (i) and j not in used:
                for k in cwh[j]:
                    if k in cwh and k not in (i, j) and k not in used:
                        for l in cwh[k]:
                            if l in cwh and l not in (i, j, k) and l not in used and i in cwh[l]:
                                ni, nj, nk, nl = nts[i]['index'], nts[j]['index'], nts[k]['index'], nts[l]['index']
                                nmin = min(ni, nj, nk, nl)
                                if ni == nmin:
                                    tetrad = (i, j, k, l)
                                elif nj == nmin:
                                    tetrad = (j, k, l, i)
                                elif nk == nmin:
                                    tetrad = (k, l, i, j)
                                else:
                                    tetrad = (l, i, j, k)
                                tetrads.append(tetrad)
                                used.update(tetrad)

    def check_tetrads_stem(ti, tj):
        ti = [nts[nt]['index'] for nt in ti]
        tj = [nts[nt]['index'] for nt in tj]
        index_diff = [j - i for i, j in zip(ti, tj)]
        return all([abs(diff) == 1 for diff in index_diff])

    stems = dict()
    for ti, tj in itertools.combinations(tetrads, 2):
        if check_tetrads_stem(ti, tj):
            if not ti in stems:
                stems[ti] = list()
            stems[ti].append(tj)
            if not tj in stems:
                stems[tj] = list()
            stems[tj].append(ti)

    def check_tetrads_stacking(ti, tj):
        ti, tj = set(ti), set(tj)
        for stack in stacks:
            stack = set(stack)
            if not stack.isdisjoint(ti) and not stack.isdisjoint(tj):
                ti.difference_update(stack)
                tj.difference_update(stack)
        return len(ti) <= stacking_mismatch and len(tj) <= stacking_mismatch

    stackings = dict()
    for ti, tj in itertools.combinations(tetrads, 2):
        if check_tetrads_stacking(ti, tj):
            if not ti in stackings:
                stackings[ti] = list()
            stackings[ti].append(tj)
            if not tj in stackings:
                stackings[tj] = list()
            stackings[tj].append(ti)

    quadruplexes = list()
    candidates = set(tetrads)
    while candidates:
        quadruplex = [candidates.pop()]
        changed = True
        while changed:
            changed = False
            for tetrad in quadruplex:
                if tetrad in stackings:
                    for stacked in stackings[tetrad]:
                        if stacked in candidates:
                            quadruplex.append(stacked)
                            candidates.remove(stacked)
                            changed = True
                if args.relaxed_stem_definition and tetrad in stems:
                    for stemmed in stems[tetrad]:
                        if stemmed in candidates:
                            quadruplex.append(stemmed)
                            candidates.remove(stemmed)
                            changed = True
        quadruplexes.append(quadruplex)

    if len(quadruplexes) == 0:
        print('None')
        exit()

    quadruplexes.sort(key=lambda x: len(x), reverse=True)

    for quadruplex in quadruplexes:
        if len(quadruplex) > 1:
            print('n4-helix with {} tetrads'.format(len(quadruplex)))
        else:
            print('single tetrad without stacking')

        quadruplex = list(quadruplex)
        quadruplex.sort(key=lambda x: nts[x[0]]['index'])

        previous = []
        classified = []
        votes = {'parallel': 0, 'antiparallel': 0, 'hybrid' : 0}
        for tetrad in quadruplex:
            current = [nts[nt]['index'] for nt in tetrad]
            if len(quadruplex) > 1 and previous:
                index_diff = [j - i for i, j in zip(previous, current)]
                is_stem = all([abs(diff) == 1 for diff in index_diff])
                is_parallel = len(set(index_diff)) == 1
                is_antiparallel = len(set(index_diff)) == 2
                if is_stem:
                    votes['parallel'] += 1 if is_parallel else 0
                    votes['antiparallel'] += 1 if is_antiparallel else 0
                    votes['hybrid'] += 1 if not is_parallel and not is_antiparallel else 0
                if not is_stem:
                    votes = sorted(votes.items(), key=lambda x: x[1], reverse=True)
                    # clear winner
                    if votes[0][1] > votes[1][1]:
                        stem_type = votes[0][0]
                    else:
                        stem_type = 'hybrid'
                    print('  {} stem with {} tetrads'.format(stem_type, len(classified)))
                    print('\n'.join(classified))
                    classified = []
                    votes = {'parallel': 0, 'antiparallel': 0, 'hybrid' : 0}
            previous = current

            classification = classify_onz(nts, tetrad)
            classified.append('    {} {} {} {} {}'.format(tetrad[0], tetrad[1], tetrad[2], tetrad[3], classification))


        if len(classified) > 1:
            votes = sorted(votes.items(), key=lambda x: x[1], reverse=True)
            # clear winner
            if votes[0][1] > votes[1][1]:
                stem_type = votes[0][0]
            else:
                stem_type = 'mixed'
            print('  {} stem with {} tetrads'.format(stem_type, len(classified)))
        print('\n'.join(classified))
