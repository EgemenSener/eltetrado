#! /usr/bin/env python3
import argparse
import itertools
import json
import math
import os
import shutil
import string
import subprocess
import sys
import tempfile

from collections import defaultdict, Counter
from typing import Dict, Iterable, List, Tuple, FrozenSet, Set

import numpy

from Bio.PDB import PDBParser, MMCIFParser, Structure, Residue, Atom
from Bio.PDB.Atom import DisorderedAtom
from Bio.PDB.StructureBuilder import StructureBuilder

__version__ = '0.0.2-rc2'

LW_SCORE = {
    'cWW': 1, 'tWW': 2, 'cWH': 3, 'tWH': 4, 'cWS': 5, 'tWS': 6,
    'cHW': 7, 'tHW': 8, 'cHH': 9, 'tHH': 10, 'cHS': 11, 'tHS': 12,
    'cSW': 13, 'tSW': 14, 'cSH': 15, 'tSH': 16, 'cSS': 17, 'tSS': 18
}


class Nucleotide:
    """
    Metadata about a single nucleotide.

    Attributes:
        outermost_atoms     Dict representing expected name of atom involved in glycosidic bond
        innermost_atoms     Dist representing expected name of atom closest to the tetrad center
    """
    outermost_atoms = {'A': 'N9', 'G': 'N9', 'C': 'N1', 'U': 'N1', 'T': 'N1'}
    innermost_atoms = {'A': 'N6', 'G': 'O6', 'C': 'N4', 'U': 'O4', 'T': 'O4'}

    @staticmethod
    def detect_molecule(resname: str):
        if resname in ('DA', 'DC', 'DG', 'DT'):
            return 'DNA'
        if resname in ('A', 'C', 'G', 'U'):
            return 'RNA'
        return 'Other'

    def __init__(self, nt: dict, structure3d: Structure):
        self.model: int = 1 if nt['nt_id'].find(':') == -1 else int(nt['nt_id'].split(':')[0])
        self.chain: str = nt['chain_name']
        self.number: int = nt['nt_resnum']
        self.icode: str = ' ' if nt['nt_id'].find('^') == -1 else nt['nt_id'].split('^')[1]
        self.molecule: str = self.detect_molecule(nt['nt_name'])
        self.full_name: str = nt['nt_id']
        self.short_name: str = nt['nt_code']
        self.glycosidic_bond: str = nt['glyco_bond']
        self.index: int = nt['index']
        self.model_chain: str = self.chain if nt['nt_id'].find(':') == -1 else '{}:{}'.format(self.model, self.chain)
        self.residue3d: Residue = None

        if structure3d:
            if len(structure3d) == 1:
                model3d = next(iter(structure3d))
            else:
                model3d = structure3d[self.model]
            hetflag = 'H_{}'.format(nt['nt_name']) if 'is_modified' in nt and nt['is_modified'] is True else ' '
            key = (hetflag, self.number, self.icode)
            chain3d = model3d[self.chain]
            if key in chain3d:
                self.residue3d = chain3d[key]
            else:
                for residue3d in chain3d:
                    hetflag, resseq, icode = residue3d.id
                    if resseq == self.number and icode == self.icode:
                        self.residue3d = residue3d
                        break
                else:
                    raise RuntimeError('Failed to find residue {}'.format(self.full_name))

    def __eq__(self, other):
        return self.full_name == other.full_name

    def __hash__(self):
        return hash(self.full_name)

    def __lt__(self, other):
        return self.index < other.index

    def __repr__(self):
        return self.full_name

    def __str__(self):
        return self.full_name

    def outermost_atom(self) -> Atom:
        upper = self.short_name.upper()
        if upper in self.outermost_atoms:
            return self.find_atom(self.outermost_atoms[upper])

        # purines
        atom = self.find_atom('N9')
        if atom:
            return atom
        # pyrimidines
        return self.find_atom('N1')

    def innermost_atom(self) -> Atom:
        upper = self.short_name.upper()
        if upper in self.innermost_atoms:
            return self.find_atom(self.innermost_atoms[upper])
        # purines
        if self.find_atom('N9'):
            return self.find_atom('C6')
        # pyrimidines
        return self.find_atom('C4')

    def find_atom(self, expected_atom: str) -> Atom:
        if self.residue3d:
            for atom in self.residue3d.get_atoms():
                if atom.name == expected_atom:
                    if isinstance(atom, DisorderedAtom):
                        return atom.selected_child
                    return atom
        return None


class Pair:
    def __init__(self, nt1: Nucleotide, nt2: Nucleotide, lw: str, saenger: str):
        self.pair: Tuple[Nucleotide, Nucleotide] = (nt1, nt2)
        self.lw: str = lw
        self.saenger: str = saenger

    def __eq__(self, other):
        return self.pair == other.pair and self.lw == other.lw and self.saenger == other.saenger

    def __hash__(self):
        return hash((self.pair, self.lw, self.saenger))

    def __str__(self):
        return '{} {} {} {}'.format(self.pair[0], self.pair[1], self.lw, self.score())

    def conflicts_with(self, other) -> bool:
        xi, yi = sorted((self.pair[0].index, self.pair[1].index))
        xj, yj = sorted((other.pair[0].index, other.pair[1].index))
        return xi < xj < yi < yj or xj < xi < yj < yi

    def reverse(self):
        lw = '{}{}{}'.format(self.lw[0], self.lw[2], self.lw[1])
        return Pair(self.pair[1], self.pair[0], lw, self.saenger)

    def score(self) -> int:
        return LW_SCORE.get(self.lw, 100)


class Tetrad:
    @staticmethod
    def is_valid(nt1: Nucleotide, nt2: Nucleotide, nt3: Nucleotide, nt4: Nucleotide,
                 pairs: Dict[Tuple[Nucleotide, Nucleotide], Pair]) -> bool:
        p1, p2, p3, p4 = pairs[(nt1, nt2)], pairs[(nt2, nt3)], pairs[(nt3, nt4)], pairs[(nt4, nt1)]
        for pi, pj in ((p1, p4), (p2, p1), (p3, p2), (p4, p3)):
            if pi.lw[1] == pj.lw[2]:
                return False
        return True

    def __init__(self, nt1: Nucleotide, nt2: Nucleotide, nt3: Nucleotide, nt4: Nucleotide,
                 pairs: Dict[Tuple[Nucleotide, Nucleotide], Pair]):
        self.nucleotides: Tuple[Nucleotide, Nucleotide, Nucleotide, Nucleotide] = (nt1, nt2, nt3, nt4)
        self.pairs: Tuple[Pair, Pair, Pair, Pair] = (pairs[(nt1, nt2)], pairs[(nt2, nt3)], pairs[(nt3, nt4)],
                                                     pairs[(nt4, nt1)])
        self.set: FrozenSet[Nucleotide] = frozenset(self.nucleotides)
        self.planarity_deviation: float = self.__calculate_planarity_deviation()
        self.__score = sum(x.score() for x in self.pairs)
        self.__hash = hash(self.set)

    def __hash__(self):
        return self.__hash

    def __iter__(self):
        return iter(self.nucleotides)

    def __repr__(self):
        return '{}-{}-{}-{}'.format(*self.nucleotides)

    def __str__(self):
        return '    {} {} {} {} {}-{}-{}-{} {} planarity={}\n'.format(self.nucleotides[0], self.nucleotides[1],
                                                                      self.nucleotides[2], self.nucleotides[3],
                                                                      self.pairs[0].lw, self.pairs[1].lw,
                                                                      self.pairs[2].lw, self.pairs[3].lw,
                                                                      self.get_classification(),
                                                                      round(self.planarity_deviation, 2))

    def stems_with(self, other) -> bool:
        index_diff = (j - i for i, j in zip(self.sorted_indices(), other.sorted_indices()))
        return all(abs(diff) == 1 for diff in index_diff)

    def count_non_stacked_bases(self, other, stacking: Set[Tuple[Nucleotide]]) -> Tuple[int, int]:
        ti, tj = set(self.nucleotides), set(other.nucleotides)
        for stack in stacking:
            stack = set(stack)
            if not stack.isdisjoint(ti) and not stack.isdisjoint(tj):
                ti.difference_update(stack)
                tj.difference_update(stack)
        return len(ti), len(tj)

    def sorted_indices(self) -> List[int]:
        return sorted(map(lambda x: x.index, self.nucleotides))

    def get_score(self) -> int:
        return self.__score

    def is_disjoint(self, other) -> bool:
        return self.set.isdisjoint(other.set)

    def reorder(self):
        # transform into (0, 1, 2, 3)
        ni, nj, nk, nl = (nt.index for nt in self.nucleotides)
        indices = sorted((ni, nj, nk, nl))
        ni, nj, nk, nl = (indices.index(x) for x in (ni, nj, nk, nl))

        nmin = min(ni, nj, nk, nl)
        if nmin == ni:
            pass
        elif nmin == nj:
            self.nucleotides = self.nucleotides[1:4] + self.nucleotides[0:1]
            self.pairs = self.pairs[1:4] + self.pairs[0:1]
        elif nmin == nk:
            self.nucleotides = self.nucleotides[2:4] + self.nucleotides[0:2]
            self.pairs = self.pairs[2:4] + self.pairs[0:2]
        else:
            self.nucleotides = self.nucleotides[3:4] + self.nucleotides[0:3]
            self.pairs = self.pairs[3:4] + self.pairs[0:3]

        if self.pairs[0].score() < self.pairs[3].reverse().score():
            pass
        else:
            self.nucleotides = self.nucleotides[0:1] + tuple(reversed(self.nucleotides[1:]))
            self.pairs = tuple(self.pairs[i].reverse() for i in (3, 2, 1, 0))

        ni, nj, nk, nl = (nt.index for nt in self.nucleotides)
        assert ni == min(ni, nj, nk, nl)
        pi, pj, pk, pl = self.pairs
        assert pi.score() <= pl.reverse().score(), 'Conflicting multiplet {} and {}'.format(pi, pl.reverse())

    def get_classification(self) -> str:
        self.reorder()

        # transform into (0, 1, 2, 3)
        ni, nj, nk, nl = (nt.index for nt in self.nucleotides)
        indices = sorted((ni, nj, nk, nl))
        ni, nj, nk, nl = (indices.index(x) for x in (ni, nj, nk, nl))

        order = (nj, nk, nl)
        if order == (1, 2, 3):
            return 'O+'
        elif order == (3, 2, 1):
            return 'O-'
        elif order == (1, 3, 2):
            return 'N+'
        elif order == (2, 3, 1):
            return 'N-'
        elif order == (2, 1, 3):
            return 'Z+'
        elif order == (3, 1, 2):
            return 'Z-'
        else:
            raise Exception('Impossible combination: {} {} {} {}'.format(ni, nj, nk, nl))

    def chains(self) -> Counter:
        return Counter((nt.chain for nt in self.nucleotides))

    def __calculate_planarity_deviation(self):
        if all(nt.residue3d for nt in self.nucleotides):
            outer = [nt.outermost_atom() for nt in self.nucleotides]
            inner = [nt.innermost_atom() for nt in self.nucleotides]
            if all(outer) and all(inner):
                return numpy.linalg.norm(center_of_mass(outer) - center_of_mass(inner))
        return float('nan')


class TetradPair:
    def __init__(self, tetrad1: Tetrad, tetrad2: Tetrad, stacking):
        self.tetrad1: Tetrad = tetrad1
        self.tetrad2: Tetrad = tetrad2
        self.direction: str = self.__determine_direction()
        self.rise: float = self.__calculate_rise()
        self.twist: float = self.__calculate_twist(stacking)

    def __str__(self):
        return '      direction={} rise={} twist={}\n'.format(self.direction, round(self.rise, 2), round(self.twist, 2))

    def __determine_direction(self):
        # count directions 5' -> 3' as +1 or -1
        counter = Counter(
            1 if j - i > 0 else -1 for i, j in zip(self.tetrad1.sorted_indices(), self.tetrad2.sorted_indices()))
        direction, count = counter.most_common()[0]
        # all in the same direction
        if count == 4:
            return 'parallel'
        # two in +, one in - direction
        elif count == 2:
            return 'antiparallel'
        else:
            return 'hybrid'

    def __calculate_rise(self):
        f = lambda nt: nt.outermost_atom()
        g = lambda nt: nt.innermost_atom()
        mine = tuple(itertools.chain.from_iterable((f(nt), g(nt)) for nt in self.tetrad1.nucleotides))
        theirs = tuple(itertools.chain.from_iterable((f(nt), g(nt)) for nt in self.tetrad2.nucleotides))
        if all(mine) and all(theirs):
            return numpy.linalg.norm(center_of_mass(mine) - center_of_mass(theirs))
        return float('nan')

    def __calculate_twist(self, stacking):
        for i, j in ((0, 1), (1, 2), (2, 3), (3, 0)):
            nt1_self = self.tetrad1.nucleotides[i]
            nt2_self = self.tetrad1.nucleotides[j]
            stack1 = next(filter(lambda stack: nt1_self in stack, stacking), None)
            stack2 = next(filter(lambda stack: nt2_self in stack, stacking), None)
            if not stack1 or not stack2:
                continue

            nt1_other = next(filter(lambda nt: nt in self.tetrad2.set, stack1), None)
            nt2_other = next(filter(lambda nt: nt in self.tetrad2.set, stack2), None)
            if not nt1_other or not nt2_other:
                continue

            v1 = nt1_self.find_atom("C1'").coord - nt2_self.find_atom("C1'").coord
            v1 = v1 / numpy.linalg.norm(v1)
            v2 = nt1_other.find_atom("C1'").coord - nt2_other.find_atom("C1'").coord
            v2 = v2 / numpy.linalg.norm(v2)
            return math.degrees(numpy.arccos(numpy.clip(numpy.dot(v1, v2), -1.0, 1.0)))
        print('Cannot calculate twist due to insufficient '
              'data about stacking between {} and {}'.format(repr(self.tetrad1), repr(self.tetrad2)),
              file=sys.stderr)
        return float('nan')


class Quadruplex:
    def __init__(self, tetrads: List[Tetrad], tetrad_pairs: List[TetradPair]):
        self.tetrads: List[Tetrad] = tetrads
        self.__tetrad_pairs = tuple(
            pair for pair in tetrad_pairs if pair.tetrad1 in tetrads and pair.tetrad2 in tetrads)

    def __str__(self):
        if len(self.tetrads) == 1:
            builder = '  single tetrad\n'
        else:
            builder = '  {}{}{} quadruplex with {} tetrads\n'.format(self.get_onzm(), self.get_direction(),
                                                                     self.get_sign(), len(self.tetrads))
        for tetrad in self.tetrads:
            builder += str(tetrad)
            pair = next((pair for pair in self.__tetrad_pairs if pair.tetrad2 == tetrad), None)
            if pair:
                builder += str(pair)
        return builder

    def get_onzm(self) -> str:
        classifications = [t.get_classification()[0] for t in self.tetrads]
        if 'n/a' in classifications:
            return 'U'
        counter = Counter(classifications)
        onz, support = counter.most_common()[0]
        if support == len(self.tetrads):
            return onz[0]  # O, N or Z
        return 'M'

    def get_direction(self) -> str:
        if len(self.tetrads) == 1:
            return 'n/a'
        else:
            counter = Counter((pair.direction for pair in self.__tetrad_pairs))
            direction, support = counter.most_common()[0]
            if support == len(self.tetrads) - 1:
                return direction[0]
            return 'h'

    def get_sign(self) -> str:
        onzs = [tetrad.get_classification() for tetrad in self.tetrads]
        signs = set(map(lambda x: x[1], onzs))
        if len(signs - {'-', '+'}) > 0:
            raise RuntimeError('Tetrad classification different than [ONZ][+-]: {}'.format(onzs))
        if len(signs) == 1:
            return signs.pop()
        return '±'


class Helix:
    def __init__(self, tetrads: List[Tetrad]):
        self.tetrads: List[Tetrad] = tetrads
        self.quadruplexes: List[Quadruplex] = list()
        self.tetrad_pairs: List[TetradPair] = list()

    def __iter__(self):
        return iter(self.tetrads)

    def __str__(self):
        if len(self.tetrads) > 1:
            builder = 'n4-helix with {} tetrads\n'.format(len(self.tetrads))
        else:
            builder = 'single tetrad without stacking\n'
        for quadruplex in self.quadruplexes:
            builder += str(quadruplex)
        return builder

    def find_quadruplexes(self, stacking: Set[Tuple[Nucleotide]]):
        quadruplexes = list()
        tetrad_pairs = list()
        tetrads = list()
        for tetrad in sorted(self.tetrads, key=lambda t: min(nt.index for nt in t.nucleotides)):
            if tetrads:
                tetrad_pairs.append(TetradPair(tetrad, tetrads[-1], stacking))
                if tetrad.chains() != tetrads[-1].chains():
                    quadruplexes.append(Quadruplex(tetrads, tetrad_pairs))
                    tetrads = list()
            tetrads.append(tetrad)
        quadruplexes.append(Quadruplex(tetrads, tetrad_pairs))
        self.quadruplexes = quadruplexes
        self.tetrad_pairs = tetrad_pairs


class Analysis:
    def __init__(self, data: dict, structure3d: Structure):
        self.nucleotides: Dict[str, Nucleotide] = {nt['nt_id']: Nucleotide(nt, structure3d) for nt in data['nts']}
        self.stacking: Set[Tuple[Nucleotide]] = self.__read_stacking(data)
        self.pairs: Dict[Tuple[Nucleotide, Nucleotide], Pair] = self.__read_pairs(data)
        self.canonical: Set[Pair] = {pair for pair in self.pairs.values() if
                                     pair.saenger in ('19-XIX', '20-XX', '28-XXVIII')}
        self.graph: Dict[Nucleotide, List[Nucleotide]] = dict()
        self.tetrads: Set[Tetrad] = set()
        self.stems: Dict[Tetrad, List[Tetrad]] = dict()
        self.stacks: Dict[Tetrad, List[Tetrad]] = dict()
        self.helices: List[Helix] = list()

    def __str__(self):
        builder = 'Chain order: {}\n'.format(', '.join(self.chain_order()))
        for helix in self.helices:
            builder += str(helix)
        return builder

    def build_graph(self, strict: bool):
        graph = defaultdict(list)
        for pair in self.pairs.values():
            if strict and pair.lw not in ('cWH', 'cHW'):
                continue
            nt1, nt2 = pair.pair
            graph[nt1].append(nt2)
        self.graph = graph

    def find_tetrads(self):
        # search for a tetrad: i -> j -> k -> l
        #                      ^--------------^
        tetrads = set()
        for i in self.graph:
            for j in filter(lambda x: x != i, self.graph[i]):
                for k in filter(lambda x: x not in (i, j), self.graph[j]):
                    for l in filter(lambda x: x not in (i, j, k) and x in self.graph[i], self.graph[k]):
                        if Tetrad.is_valid(i, j, k, l, self.pairs):
                            tetrads.add(Tetrad(i, j, k, l, self.pairs))

        # when two tetrads share some of the nucleotides, remove the one which has worse score
        flag = True
        while flag:
            for (ti, tj) in itertools.combinations(tetrads, 2):
                if not ti.is_disjoint(tj):
                    if ti.get_score() < tj.get_score():
                        tetrads.remove(tj)
                    else:
                        tetrads.remove(ti)
                    break
            else:
                flag = False

        self.tetrads = tetrads

    def find_stems(self):
        stems = defaultdict(list)
        for ti, tj in itertools.combinations(self.tetrads, 2):
            if ti.stems_with(tj):
                stems[ti].append(tj)
                stems[tj].append(ti)
        self.stems = stems

    def find_stacks(self, stacking_mismatch: int):
        stackings = defaultdict(list)
        for ti, tj in itertools.combinations(self.tetrads, 2):
            i, j = ti.count_non_stacked_bases(tj, self.stacking)
            if i <= stacking_mismatch and j <= stacking_mismatch:
                stackings[ti].append(tj)
                stackings[tj].append(ti)
        self.stacks = stackings

    def find_helices(self, relaxed_stem_definition: bool):
        helices = list()
        candidates = set(self.tetrads)
        while candidates:
            tetrads = [candidates.pop()]
            changed = True
            while changed:
                changed = False
                for tetrad in tetrads:
                    for stacked in filter(lambda x: x in candidates, self.stacks.get(tetrad, [])):
                        tetrads.append(stacked)
                        candidates.remove(stacked)
                        changed = True
                    if relaxed_stem_definition:
                        for stemmed in filter(lambda x: x in candidates, self.stems.get(tetrad, [])):
                            tetrads.append(stemmed)
                            candidates.remove(stemmed)
                            changed = True
            helices.append(Helix(tetrads))
        self.helices = helices

    def find_best_chain_reorder(self):
        scores = {'O+': 0, 'O-': 1, 'N+': 2, 'N-': 3, 'Z+': 4, 'Z-': 5}
        chain_groups = self.__group_related_chains()
        final_order = []

        for chains in filter(lambda x: len(x) > 1, chain_groups):
            best_permutation, best_score = chains, 1e10
            for permutation in sorted(itertools.permutations(chains)):
                self.__reorder_chains(permutation)
                classification = list(self.__get_classification())
                score = sum(scores[c] for c in classification)
                # print('Checking reorder:', ', '.join(permutation), ''.join(classification))
                if score < best_score:
                    best_score = score
                    best_permutation = permutation
            final_order.extend(best_permutation)

        if final_order:
            self.__reorder_chains(final_order)
            # classification = list(self.__get_classification())
            # print('Selected reorder:', ', '.join(final_order), ''.join(classification))

    def find_quadruplexes(self):
        for helix in self.helices:
            helix.find_quadruplexes(self.stacking)

    def chain_order(self) -> Dict[str, int]:
        return {nt.model_chain: 0 for nt in sorted(self.nucleotides.values(), key=lambda nt: nt.index)}

    def __reorder_chains(self, chain_order: Iterable[str]):
        i = 1
        for chain in chain_order:
            for nt in self.nucleotides.values():
                if nt.model_chain == chain:
                    nt.index = i
                    i += 1
        for nt in self.nucleotides.values():
            if nt.model_chain not in chain_order:
                nt.index = i
                i += 1
        for tetrad in self.tetrads:
            tetrad.reorder()

    def __group_related_chains(self):
        chains = dict()
        for q in self.helices:
            chains[q] = {n.model_chain for t in q.tetrads for n in t.nucleotides}
        changed = True
        while changed:
            changed = False
            for q1, q2 in itertools.combinations(chains.keys(), 2):
                if not chains[q1].isdisjoint(chains[q2]):
                    chains[q1].update(chains[q2])
                    del chains[q2]
                    changed = True
                    break
        return chains.values()

    def __get_classification(self):
        for q in self.helices:
            for t in q.tetrads:
                yield t.get_classification()

    def __read_stacking(self, data: dict) -> Set[Tuple[Nucleotide]]:
        stacking = set()
        for stack in data['stacks']:
            stack = tuple(filter(lambda nt_id: nt_id in self.nucleotides, stack['nts_long'].split(',')))
            if len(stack) > 1:
                stacking.add(tuple(self.nucleotides[nt] for nt in stack))
        return stacking

    def __read_pairs(self, data: dict) -> Dict[Tuple[Nucleotide, Nucleotide], Pair]:
        pairs = dict()
        for pair in data['pairs']:
            nt1, nt2, lw, saenger = pair['nt1'], pair['nt2'], pair['LW'], pair['Saenger']
            if len(lw) != 3 or lw[0] not in 'ct' or lw[1] not in 'WHS' or lw[2] not in 'WHS':
                continue
            nt1, nt2 = self.nucleotides[nt1], self.nucleotides[nt2]
            pair = Pair(nt1, nt2, lw, saenger)
            pairs[(nt1, nt2)] = pair
            pairs[(nt2, nt1)] = pair.reverse()
        return pairs


class Visualizer:
    def __init__(self, tetrads: Iterable[Tetrad], nucleotides: Iterable[Nucleotide] = tuple(),
                 canonical: Iterable[Pair] = tuple()):
        self.tetrads = tetrads
        self.nucleotides = nucleotides if nucleotides else self.__extract_nucleotides()
        self.canonical = canonical
        self.sequence, self.dotbracket, self.shifts = self.__compute_twoline_dotbracket()
        self.onz = {pair: tetrad.get_classification() for tetrad in tetrads for pair in tetrad.pairs}

    def __str__(self):
        return '{}\n{}\n{}'.format(self.sequence, *self.dotbracket)

    def visualize(self, prefix: str, suffix: str):
        tempdir = os.path.join(tempfile.gettempdir(), '.eltetrado')
        os.makedirs(tempdir, exist_ok=True)

        fd, fasta = tempfile.mkstemp('.fasta', dir=tempdir)
        os.close(fd)
        with open(fasta, 'w') as fastafile:
            fastafile.write('>{}-{}\n'.format(prefix, suffix))
            fastafile.write(''.join(self.sequence))

        layer1, layer2 = [], []
        for tetrad in self.tetrads:
            layer1.extend((tetrad.pairs[0], tetrad.pairs[2]))
            layer2.extend((tetrad.pairs[1], tetrad.pairs[3]))
        helix1 = self.__to_helix(layer1, tempdir, self.canonical)
        helix2 = self.__to_helix(layer2, tempdir)

        currdir = os.path.dirname(os.path.realpath(__file__))
        output_pdf = '{}-{}.pdf'.format(prefix, suffix)
        run = subprocess.run([os.path.join(currdir, 'quadraw.R'), fasta, helix1, helix2, output_pdf],
                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print()
        if run.returncode == 0:
            print('Plot:', output_pdf)
        else:
            print('Failed to prepare visualization, reason:\n  {}'.format(run.stderr.decode('utf-8')))

    def __extract_nucleotides(self):
        nucleotides = list()
        for tetrad in self.tetrads:
            nucleotides.extend(tetrad.nucleotides)
        return nucleotides

    def __compute_twoline_dotbracket(self):
        layer1, layer2 = [], []
        for tetrad in self.tetrads:
            layer1.extend((tetrad.pairs[0], tetrad.pairs[2]))
            layer2.extend((tetrad.pairs[1], tetrad.pairs[3]))
        sequence, dotbracket, shifts = self.__elimination_conflicts(layer1)
        dotbracket = (dotbracket, self.__elimination_conflicts(layer2)[1])
        return sequence, dotbracket, shifts

    def __to_helix(self, layer: List[Pair], tempdir: str, canonical: Iterable[Pair] = tuple()) -> str:
        fd, name = tempfile.mkstemp('.helix', dir=tempdir)
        os.close(fd)
        onz_value = {'O+': 1, 'O-': 2, 'N+': 3, 'N-': 4, 'Z+': 5, 'Z-': 6, 'n/a': 7}
        nucleotides = sorted(self.nucleotides)

        with open(name, 'w') as helixfile:
            helixfile.write('#{}\n'.format(len(self.sequence) + 1))
            helixfile.write('i\tj\tlength\tvalue\n')
            for pair in layer:
                x, y = pair.pair
                x, y = nucleotides.index(x) + 1 + self.shifts[x], nucleotides.index(y) + 1 + self.shifts[y]
                onz = self.onz[pair]
                helixfile.write('{}\t{}\t1\t{}\n'.format(x, y, onz_value[onz]))
            for pair in canonical:
                x, y = pair.pair
                x, y = nucleotides.index(x) + 1 + self.shifts[x], nucleotides.index(y) + 1 + self.shifts[y]
                helixfile.write('{}\t{}\t1\t8\n'.format(x, y))
        return name

    def __elimination_conflicts(self, pairs):
        orders = dict()
        order = 0
        queue = list(pairs)
        removed = []

        while queue:
            conflicts = defaultdict(list)
            for pi, pj in itertools.combinations(queue, 2):
                if pi.conflicts_with(pj):
                    conflicts[pi].append(pj)
                    conflicts[pj].append(pi)
            if conflicts:
                pair, _ = sorted(conflicts.items(), key=lambda x: (len(x[1]), x[0].pair[0]), reverse=True)[0]
                removed.append(pair)
                queue.remove(pair)
            else:
                orders.update({pair: order for pair in queue})
                queue, removed = removed, []
                order += 1

        opening = '([{<' + string.ascii_uppercase
        closing = ')]}>' + string.ascii_lowercase
        dotbracket = dict()
        for pair, order in orders.items():
            nt1, nt2 = sorted(pair.pair)
            dotbracket[nt1] = opening[order]
            dotbracket[nt2] = closing[order]

        sequence = ''
        structure = ''
        shifts = dict()
        shift_value = 0
        chain = None
        for nt in sorted(self.nucleotides):
            if chain and chain != nt.model_chain:
                sequence += '-'
                structure += '-'
                shift_value += 1
            sequence += nt.short_name
            structure += dotbracket.get(nt, '.')
            shifts[nt] = shift_value
            chain = nt.model_chain
        return sequence, structure, shifts


class Encoder(json.JSONEncoder):
    @staticmethod
    def stericity(pair: Pair) -> str:
        if pair.lw[0] == 'c':
            return 'cis'
        if pair.lw[0] == 't':
            return 'trans'
        raise RuntimeError('unrecognized stericity {} in Leontis-Westhof notation {}'.format(pair.lw[0], pair.lw))

    @staticmethod
    def edge(pair: Pair, edge5: bool = True) -> str:
        letter = pair.lw[1] if edge5 else pair.lw[2]
        if letter == 'W':
            return 'Watson-Crick'
        if letter == 'H':
            return 'Hoogsteen'
        if letter == 'S':
            return 'Sugar'
        raise RuntimeError('unrecognized edge {} in Leontis-Westhof notation {}'.format(letter, pair.lw))

    def default(self, o):
        if isinstance(o, Nucleotide):
            return {
                'index': o.index,
                'model': o.model,
                'chain': o.chain,
                'number': o.number,
                'icode': o.icode,
                'molecule': o.molecule,
                'full_name': o.full_name,
                'short_name': o.short_name,
                'glycosidic_bond': o.glycosidic_bond
            }
        if isinstance(o, Pair):
            return {
                'nt1': repr(o.pair[0]),
                'nt2': repr(o.pair[1]),
                'stericity': self.stericity(o),
                'edge5': self.edge(o, True),
                'edge3': self.edge(o, False)
            }
        if isinstance(o, Tetrad):
            return {
                'nt1': repr(o.nucleotides[0]),
                'nt2': repr(o.nucleotides[1]),
                'nt3': repr(o.nucleotides[2]),
                'nt4': repr(o.nucleotides[3]),
                'onz': o.get_classification(),
                'planarity_deviation': o.planarity_deviation
            }
        if isinstance(o, TetradPair):
            return {
                'tetrad1': repr(o.tetrad1),
                'tetrad2': repr(o.tetrad2),
                'direction': o.direction,
                'rise': o.rise,
                'twist': o.twist
            }
        if isinstance(o, Quadruplex):
            return {
                'tetrads': {repr(t): t for t in o.tetrads},
                'onzm': o.get_onzm() + o.get_direction() + o.get_sign() if len(o.tetrads) > 1 else 'n/a'
            }
        if isinstance(o, Helix):
            return {
                'quadruplexes': o.quadruplexes,
                'tetrad_pairs': o.tetrad_pairs
            }
        if isinstance(o, Analysis):
            return {
                'nucleotides': o.nucleotides,
                'base_pairs': tuple(o.pairs.values()),
                'helices': o.helices
            }


def center_of_mass(atoms):
    coords = [atom.coord for atom in atoms]
    xs = (coord[0] for coord in coords)
    ys = (coord[1] for coord in coords)
    zs = (coord[2] for coord in coords)
    return numpy.array((sum(xs) / len(coords), sum(ys) / len(coords), sum(zs) / len(coords)))


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('--pdb', help='path to input PDB or PDBx/mmCIF file')
    parser.add_argument('--dssr-json', help='path to input JSON file generated with `x3dna-dssr --json`')
    parser.add_argument('--output', help='(optional) path for output JSON file')
    parser.add_argument('--stacking-mismatch',
                        help='a perfect tetrad stacking covers 4 nucleotides; this option can be used with value 1 or '
                             '2 to allow this number of nucleotides to be non-stacked with otherwise well aligned '
                             'tetrad [default=2]',
                        default=2, type=int)
    parser.add_argument('--relaxed-stem-definition', action='store_true',
                        help='when set, two sequentially close tetrades will be considered a stem regardless of their '
                             'stacking')
    parser.add_argument('--strict', action='store_true',
                        help='nucleotides in tetrad are found when linked only by cWH pairing')
    parser.add_argument('--no-reorder', action='store_true',
                        help='chains of bi- and tetramolecular quadruplexes are reordered to be able to have them '
                             'classified; when this is set, chains will be processed in original order and '
                             'bi-/tetramolecular quadruplexes will not be classified')
    parser.add_argument('--complete-2d', action='store_true',
                        help='when set, the visualization will also show canonical base pairs to provide context for '
                             'the quadruplex')
    parser.add_argument('--no-image', action='store_true',
                        help='when set, the visualization will not be created at all')
    parser.add_argument('--version', action='version', version='%(prog)s {}'.format(__version__))

    args = parser.parse_args()
    if not args.pdb and not args.dssr_json:
        print(parser.print_help())
        sys.exit()
    return args


def load_dssr_results(args):
    if args.dssr_json:
        with open(args.dssr_json) as jsonfile:
            dssr = jsonfile.read()
    else:
        tempdir = tempfile.mkdtemp()
        currdir = os.path.dirname(os.path.realpath(__file__))
        shutil.copy(os.path.join(currdir, 'x3dna-dssr'), tempdir)
        dssr = subprocess.Popen(
            ['./x3dna-dssr', '-i={}'.format(os.path.abspath(args.pdb)), '--json'],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=tempdir)
        dssr, _ = dssr.communicate()

        shutil.rmtree(tempdir)

    try:
        return json.loads(dssr)
    except json.JSONDecodeError as e:
        print('Invalid JSON\n', e, file=sys.stderr)
        sys.exit(1)


def read_3d_structure(inputfile: str) -> Structure:
    root, extension = os.path.splitext(inputfile)
    parser = PDBParser() if extension == '.pdb' else MMCIFParser()
    structure = parser.get_structure(os.path.basename(root), inputfile)
    serial_nums = defaultdict(list)
    for model in structure:
        serial_nums[model.serial_num].append(model)

    if len(serial_nums) == len(structure):
        return structure

    builder = StructureBuilder()
    builder.init_structure(structure.id)
    for serial_num, models in serial_nums.items():
        builder.init_model(serial_num)
        builder.init_seg(' ')
        for model in models:
            for chain in model:
                builder.init_chain(chain.id)
                for residue in chain:
                    builder.init_residue(residue.resname, *residue.id)
                    for atom in residue:
                        builder.init_atom(atom.name, atom.coord, atom.bfactor, atom.occupancy, atom.altloc,
                                          atom.fullname, element=atom.element)
    return builder.get_structure()


if __name__ == '__main__':
    args = parse_arguments()
    dssr = load_dssr_results(args)

    if 'pairs' not in dssr:
        print('None')
        sys.exit()

    structure3d = read_3d_structure(args.pdb) if args.pdb else None
    structure = Analysis(dssr, structure3d)
    structure.build_graph(args.strict)
    structure.find_tetrads()

    if not structure.tetrads:
        print('None')
        sys.exit()

    structure.find_stems()
    structure.find_stacks(args.stacking_mismatch)
    structure.find_helices(args.relaxed_stem_definition)
    structure.find_quadruplexes()

    if not structure.helices:
        print('None')
        sys.exit()

    if not args.no_reorder:
        structure.find_best_chain_reorder()

    print(structure)

    visualizer = Visualizer(structure.tetrads, structure.nucleotides.values(),
                            structure.canonical if args.complete_2d else tuple())
    print(visualizer)

    if not args.no_image:
        inputname = args.pdb if args.pdb else args.dssr_json
        prefix = os.path.splitext(os.path.basename(inputname))[0]
        suffix = 'str'
        visualizer.visualize(prefix, suffix)

        for i, helix in enumerate(structure.helices):
            hv = Visualizer(helix.tetrads)
            suffix = 'h{}'.format(i + 1)
            hv.visualize(prefix, suffix)

            for j, quadruplex in enumerate(helix.quadruplexes):
                qv = Visualizer(quadruplex.tetrads)
                qv.visualize(prefix, '{}-q{}'.format(suffix, j + 1))

                for k, tetrad in enumerate(quadruplex.tetrads):
                    tv = Visualizer([tetrad])
                    tv.visualize(prefix, '{}-q{}-t{}'.format(suffix, j + 1, k + 1))

    if args.output:
        with open(args.output, 'w') as jsonfile:
            json.dump(structure, jsonfile, cls=Encoder)
